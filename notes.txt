CURRENT LIMITATIONS:
    MAX 4 gb of definitions;
    MAX 4 gb of expressions;
    MAX 4 gb source file;
    MAX 256 arguments;

TODO: proper support for overload sets. get rid of hacks.

/*

Why return type is after arguments?
Because that way it can depend on input types.


Thoughts about characters:
'☺' - utf32 codepoint
`☺` - 



Import string as expression???



// Member functions: c.baz(11, a.foo(42).bar(16));
//
//             Lisp: (baz, c, 11, (bar, (foo, a, 42), 16));
//
//                C: baz(c, 11, bar(foo(a, 42), 16));
//
//             C^-1: (c, 11, ((a, 42)foo, 16)bar)baz;


How arrays should be passed as arguments? How anything relatively big should be passed? Copy or constant reference?
Copy may be too expensive.
Constant arguments may not be modified, so there should be no way to do this: 


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

idea:
`is` from c#, but better.
*/
is cat :: fn (a: *Animal): *Cat {
    return if a.is_cat then a as *Cat else null;
}

animal: *Animal;

if animal is cat kitty {
    meow(kitty);
}

/*
But can null be a valid value for this? When 'something' is 'something else'. I think no.

Also this can be combined with function overloading.

But there may be some problems with parsing when not `binding` an identifier to the result:
*/
if b is cat print("meow"); // `print` identifier is ambiguous - either it is a cat name, or a function name.
/*
I see three solutions:
Use then:
*/
if b is cat then print("meow");
/*
Or use parens:
*/
if (b is cat) print("meow");
/*
Or always `bind` the result:
*/
if b is cat _ print("meow");
/*

Maybe the language should allow definitions to be expressions?
*/
if kitty := cat(animal) print("meyow");
/*
That way we'll have things like this
*/
while (k := get_value()) != 0 {
    // do something with `k` ...
}
/*
*/

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////
// Inline array in a structure //
/////////////////////////////////

InlineString :: struct {
    count : u64;
    data : [? count]u8;
}

// Because the size is unknown at compile time, length of the array is calculated by evaluating user-provided expression.

// Also this struct can only be passed by pointer.

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

I think assert should be just a regular function. For that i'll need to implement argument expression string.

